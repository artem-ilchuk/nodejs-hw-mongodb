{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Your contacts in pocket App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is documentation of \"Your contacts in pocket App\" application"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:6060"
    },
    {
      "url": "https://contacts-app-fgbg.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to authentication and authorization"
    },
    {
      "name": "Contacts",
      "description": "Operations related to contacts"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "operationId": "createUser",
        "description": "Register user with payload",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User`s name. Should be 3-20 characters long.",
                    "type": "string",
                    "example": "Nelson Clarcson"
                  },
                  "email": {
                    "description": " User`s email address. Email must be a valid email address.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  },
                  "password": {
                    "description": "User`s password.",
                    "type": "string",
                    "example": "querty1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "\"email\" is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Email is in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "array",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login existing user in a database with payload",
        "security": [
          {
            "cookieAuth": []
          },
          {
            "refreshTokenAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": " User`s email address. Email must be a valid email address.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  },
                  "password": {
                    "description": "User`s password.",
                    "type": "string",
                    "example": "querty1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in an user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "M8UavAGWqMJiC5qPStjpa7WefmGlViYYNMnUzfsv"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Email or password is incorrect"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the authenticated user by clearing the session ID and refresh token cookies.",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "167f69ad009f0dbf4d848c0fa",
              "description": " User`s session id. Backend-generated unique identifier"
            }
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string",
              "example": "167f69ad009f0dbf4d848c0fa",
              "description": "Backend-generated unique refresh token"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No content. Successfully logged out user and a session is cleared ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Missing or invalid sessionId or refreshToken."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refresh user`s access rights.",
        "operationId": "refreshUser",
        "description": "Refresh user`s access rights, creating a new pair of access and refresh tokens.",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "167f69ad009f0dbf4d848c0fa",
              "description": " User`s session id. Backend-generated unique identifier"
            }
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string",
              "example": "167f69ad009f0dbf4d848c0fa",
              "description": "Backend-generated unique refresh token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "M8UavAGWqMJiC5qPStjpa7WefmGlViYYNMnUzfsv"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Session not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Send email to reset user`s password",
        "operationId": "sendResetPasswordUser",
        "description": "Sends a password reset email to the user with a secure link containing a JWT token. The token is embedded into an HTML email and is valid for 5 minutes. Clicking the link redirects the user to the frontend reset password form.",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "description": " User`s email address. Email must be a valid email address.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email has been successfully sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent."
                    },
                    "data": {
                      "type": "object",
                      "description": "Empty object. JWT token is sent via email, not returned in response.",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "\"email\" is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send the email, please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset user`s password",
        "operationId": "ResetPasswordUser",
        "description": "Resets the user`s password using a JWT token received via email. The token must be sent along with the new password in the request body. Token is verified on the backend and used to identify the user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "JWT token received by email. Must be valid and not expired.",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  },
                  "password": {
                    "type": "string",
                    "description": "New password for the user",
                    "example": "Querty3456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Token is expired or invalid."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getGoogleOAuthUrl",
        "description": "Returns a Google OAuth authorization URL for user login/registration via Google. The client should redirect the user to this URL to initiate the authentication flow.",
        "security": [],
        "responses": {
          "200": {
            "description": "Google OAuth URL successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "oauth_url"
                      ],
                      "properties": {
                        "oauth_url": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=956191364387-ttignq6rj4bmq0nufiu2caq2f0vtd9pq.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Foauth-redirect"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/confirm-oauth": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Confirm Google OAuth login",
        "operationId": "confirmGoogleOAuth",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Confirms Google OAuth login by validating the authorization code received from the frontend, then logs in or registers the user and returns an access token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Authorization code returned by Google after user login",
                    "example": "4/0Ab_5qlnJEkxXcVVI2TlN9K0nZE8UuUlbUlkFecI3cYEarbCm_isP8krv9--KgnCl6jwlfA"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in user via Google OAuth",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "x6NhBxNMlqETl7lqaLnaFPfTjNkj7nPYG7ScULoA"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid authorization code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "Create a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "description": "Contact`s name. Name can only contain letters, numbers, spaces, dashesand and be 3-20 characters long.",
                    "type": "string",
                    "example": "Nelson Clarcson"
                  },
                  "phoneNumber": {
                    "description": "Contact`s phone number. Should contain only numbers, spaces, dashes, or parentheses and be 3-20 characters long.",
                    "type": "string",
                    "example": 380000000005
                  },
                  "email": {
                    "description": "Contact`s email address. Email must be a valid email address with a '.com' or '.net' domain and be 3-20 characters long.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  },
                  "isFavourite": {
                    "description": "Indicates whether the contact is marked as favourite.",
                    "type": "string",
                    "example": true
                  },
                  "contactType": {
                    "description": "Type of contact",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "work",
                    "default": "personal"
                  },
                  "photo": {
                    "description": "Link to contact`s photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a contact!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "\"name\" is required"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get list of contacts",
        "operationId": "getContacts",
        "description": "Get list of all contacts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "description": " _id, name, phoneNumber, email, isFavourite, contactType, createdAt, updatedAt fields can be mentioned. Default value - _id",
              "example": "name"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "description": "Filtering contacts by contactType value.",
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ],
              "example": "personal"
            }
          },
          {
            "in": "query",
            "name": "isFavourite",
            "schema": {
              "description": "Filtering contacts by isFavourite value.",
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "example": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contacts!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contacts!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/contact"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 4
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 4
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContact",
        "description": "Get contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67c6ec11bea2f2f00f377bb6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 67c6ec11bea2f2f00f377bb6!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update an existing contact",
        "operationId": "patchContact",
        "description": "Patch contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67c6ec11bea2f2f00f377bb6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Contact`s name. Name can only contain letters, numbers, spaces, dashesand and be 3-20 characters long.",
                    "type": "string",
                    "example": "Nelson Clarcson"
                  },
                  "phoneNumber": {
                    "description": "Contact`s phone number. Should contain only numbers, spaces, dashes, or parentheses and be 3-20 characters long.",
                    "type": "string",
                    "example": 380000000005
                  },
                  "email": {
                    "description": "Contact`s email address. Email must be a valid email address with a '.com' or '.net' domain and be 3-20 characters long.",
                    "type": "string",
                    "example": "nelson89@gmail.com"
                  },
                  "isFavourite": {
                    "description": "Indicates whether the contact is marked as favourite.",
                    "type": "string",
                    "example": true
                  },
                  "contactType": {
                    "description": "Type of contact",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "work",
                    "default": "personal"
                  },
                  "photo": {
                    "description": "Link to contact`s photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patch contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact by id",
        "operationId": "deleteContact",
        "description": "Delete contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "67c6ec11bea2f2f00f377bb6"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No content. Successfully deleted contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionId",
        "description": "Session ID stored in a cookie, used for authentication."
      },
      "refreshTokenAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "refreshToken",
        "description": "Refresh token stored in a cookie, used for refreshing the session."
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "User`s id. Backend-generated unique identifier.",
            "type": "string",
            "example": "67ef93c856930f2c47efa213"
          },
          "name": {
            "description": "User`s name. Should be 3-20 characters long.",
            "type": "string",
            "example": "Nelson Clarcson"
          },
          "email": {
            "description": " User`s email address. Email must be a valid email address.",
            "type": "string",
            "example": "nelson89@gmail.com"
          },
          "password": {
            "description": "User`s password.",
            "type": "string",
            "example": "querty1234"
          },
          "createdAt": {
            "description": "User`s created date",
            "type": "string",
            "format": "date-time",
            "example": "2024-05-08T16:12:14.954170"
          },
          "updatedAt": {
            "description": "User`s updated date",
            "type": "string",
            "format": "date-time",
            "example": "2024-05-08T16:12:14.954170"
          }
        }
      },
      "contact": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "contactType",
          "userId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "Contact`s id. Backend-generated unique identifier.",
            "type": "string",
            "example": "67c6ec11bea2f2f00f377bb6"
          },
          "name": {
            "description": "Contact`s name. Name can only contain letters, numbers, spaces, dashesand and be 3-20 characters long.",
            "type": "string",
            "example": "Nelson Clarcson"
          },
          "phoneNumber": {
            "description": "Contact`s phone number. Should contain only numbers, spaces, dashes, or parentheses and be 3-20 characters long.",
            "type": "string",
            "example": 380000000005
          },
          "email": {
            "description": "Contact`s email address. Email must be a valid email address with a '.com' or '.net' domain and be 3-20 characters long.",
            "type": "string",
            "example": "nelson89@gmail.com"
          },
          "isFavourite": {
            "description": "Indicates whether the contact is marked as favourite.",
            "type": "string",
            "example": true
          },
          "contactType": {
            "description": "Type of contact",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "example": "work",
            "default": "personal"
          },
          "photo": {
            "description": "Link to contact`s photo",
            "type": "string",
            "example": "https://res.cloudinary.com/dfboyfozv/image/upload/v1744107940/bdmhcd1pb37zr3pbe4rl.png",
            "default": null
          },
          "userId": {
            "description": "Contact's user id. Backend-generated unique identifier.",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "createdAt": {
            "description": "Contact`s created date",
            "type": "string",
            "format": "date-time",
            "example": "2024-05-08T16:12:14.954170"
          },
          "updatedAt": {
            "description": "Contact`s updated date",
            "type": "string",
            "format": "date-time",
            "example": "2024-05-08T16:12:14.954170"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request. Contact`s ID is not valid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "ID is not valid"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Token is expired or invalid."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Contact Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}